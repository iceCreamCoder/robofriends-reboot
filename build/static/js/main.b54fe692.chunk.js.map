{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","username","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0RAqBeA,EAnBF,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC5B,OAEI,yBACAC,UAAU,iFAIN,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,cAEpB,6BACA,4BAAKF,GACL,2BAAIC,MCQDK,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,6BAEEA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdD,MAAOM,EAAOG,GAAGT,MACjBD,SAAUO,EAAOG,GAAGV,gBCEnBY,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKV,UAAU,OACf,2BACCA,UAAU,mCACVW,KAAK,SACLC,YAAY,sBACZC,SAAUH,MCGJI,G,YARA,SAACC,GACZ,OACI,yBAAKhB,GAAG,UACHgB,EAAMC,YC+CJC,E,YA9Cb,aAAe,IAAD,8BACZ,+CAaFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAbvC,EAAKC,MAAQ,CACXpB,OAAQ,GACRiB,YAAa,IAJL,E,iFAQO,IAAD,OAClBI,MAAM,4CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEhB,OAAQyB,S,+BAOjC,IAAD,EACuBC,KAAKN,MAA5BpB,EADA,EACAA,OAAQiB,EADR,EACQA,YACTU,EAAiB3B,EAAO4B,QAAO,SAAA5B,GACnC,OAAOA,EAAOP,SAASoC,cAAcC,SAASb,EAAYY,kBAO5D,OAAqB,IAAlB7B,EAAO+B,OACD,wBAAInC,UAAU,MAAd,yBAGL,yBAAKA,UAAU,MACb,2CACA,kFACA,kBAAC,EAAD,CAAUU,aAAcoB,KAAKZ,iBAC7B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUd,OAAQ2B,U,GAtCZK,a,YCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAQ,6BACb,kBAAC,EAAD,OAGEC,SAASC,eAAe,SDsHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.b54fe692.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({username, email, id}) => {\r\n    return (\r\n\r\n        <div\r\n        className=\"bg-blue \r\n        { background-color: #357EDD} \r\n        dib br3 bw2  shadow-5 pa3 ma3 grow\"\r\n         >\r\n            <img alt=\"Robot\" src={`https://robohash.org/${id}?200x200`} ></img>\r\n            \r\n            <div>\r\n            <h2>{username}</h2>\r\n            <p>{email}</p>\r\n\r\n             </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return (\r\n        <div>\r\n           {\r\n          robots.map((user, i) => {\r\n          return  (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              email={robots[i].email}\r\n              username={robots[i].username} \r\n              />\r\n            )\r\n          }) \r\n         }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n        <input\r\n         className=\"pa3 ba b--green bg-lightest-blue\"\r\n         type=\"search\"\r\n         placeholder=\"Search your friends\"\r\n         onChange={searchChange}\r\n        />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './Scroll.css'\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div id=\"scroll\" >\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SeachBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n      this.state = {\r\n        robots: [],\r\n        searchfield: ''\r\n      }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(`https:jsonplaceholder.typicode.com/users`)\r\n    .then(response => response.json())\r\n      .then(users => this.setState({ robots: users}))\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({searchfield: event.target.value})\r\n  }\r\n\r\n  render() {\r\n    const {robots, searchfield} = this.state;\r\n    const filteredRobots = robots.filter(robots => {\r\n      return robots.username.toLowerCase().includes(searchfield.toLowerCase());\r\n    });\r\n\r\n\r\n    // optional ternary\r\n    // return !robots.length ? <h1>loading</h1> : ( <CardList robots={filteredRobots}/>)\r\n\r\n    if(robots.length === 0) { // optional !robots.length\r\n      return <h1 className=\"tc\">Loading - Please Wait</h1>\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1>RoboFriends</h1>\r\n          <p>Coming soon - a feature to add and favorite robots!</p>\r\n          <SeachBox searchChange={this.onSearchChange} />\r\n          <Scroll>\r\n            <CardList robots={filteredRobots}/>\r\n          </Scroll>\r\n        </div>\r\n\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './containers/App';\r\nimport './index.css';\r\nimport 'tachyons';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render( <div>\r\n    <App />\r\n</div>\r\n    \r\n    , document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}